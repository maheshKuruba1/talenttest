package routines;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.lang3.RegExUtils;
import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.XPath;

public class CODAUtils {

	private static final Map<String,String> OC_CODEs = Collections.unmodifiableMap(new HashMap<String,String>() {{
		put( "OCA", "E008");
		put( "OCG", "E017");
		put( "OCP", "E006");
		put("OCBA", "E015");
	}});
	
	public static String getCodaCodeForOC(String partnerReference, String parterName) {
		
		final List<String> possibleAcronyms = new ArrayList<>();
		
		final String searchString = partnerReference +" " + parterName;
		
		for(final String splittedSpaces : StringUtils.split(searchString, " ")) {
			for(String splittedUnderscore : StringUtils.split(splittedSpaces, "_")) {
				possibleAcronyms.add(splittedUnderscore.trim().toUpperCase(Locale.ENGLISH));
			}
		}
		
		for(Map.Entry<String, String> e : OC_CODEs.entrySet()) {
			if(possibleAcronyms.contains(e.getKey())) {
				return e.getValue();
			}
		}

		return null;
	}

	//CODAUtils.removeBanksIfNecessary(xxx.payload.getDocument(), globalMap.get("hasBankAccount"));
	public static void removeBanksIfNecessary(Document dom4jDocument, Object hasBankAccount) {
		
		if(hasBankAccount != Boolean.FALSE) {
			return;
		}

	    Map<String,String> uris = new HashMap<String,String>();

	    uris.put("elm", "http://www.coda.com/efinance/schemas/elementmaster");
	    
	    XPath xpath = org.dom4j.DocumentHelper.createXPath("//elm:Banks");

	    xpath.setNamespaceURIs(uris);
	    
	    Node n = xpath.selectSingleNode(dom4jDocument);
	    
	    if(n == null) {
	    	//already removed
	    	return;
	    }
	    
	    n.getParent().remove(n);

	}

	public static String prepareCodaField(final String uncleanValue) {
		return prepareCodaField(uncleanValue, -1);
	}

	public static String prepareCodaField(final String uncleanValue, final int outputFieldMaxLength) {
		/*
		 * The order is important!
		 * 
		 *  1. convert all accents to plain characters
		 *  2. remove all invalid characters (incl. e.g. unicode "?")
		 *  
		 *  (if necessary) 2.a remove extra characters 
		 *  
		 *  3. remove leading & trailing whitespace
		 */
		final String noAccents = StringUtils.stripAccents(uncleanValue);
		final String noBlacklistedCharacters = RegExUtils.removeAll(noAccents, "[^A-Za-z0-9&<>\\[\\]%()\\\\/\\ \\-\\+._:@]");
		
		final String lengthLimited; 
		
		if(outputFieldMaxLength != -1) {
			lengthLimited = StringUtils.left(noBlacklistedCharacters, outputFieldMaxLength);
		} else {
			lengthLimited = noBlacklistedCharacters;
		}
		
		final String trimmedValue = StringUtils.trim(lengthLimited);
		
		return trimmedValue;
	}
	
	
    public static String plusOneBlank(String code, boolean plusOne, int size) {
    	
    	 if (size == 0 || code.equals("")) {
             throw new IllegalArgumentException("Code or size cannot empty.");
         }
    	
        String ret = code;
        if (code == null || code.length() < size)
            code = StringHandling.RPAD(code, size, " ");
        String prefix = code.substring(0,size);
        if (code.length() == size && ! plusOne) {
            return prefix;
        }
        int postFix = 0; 
        if (code.length() > size) {
            String postFixString = code.substring(size);
            postFix = Integer.parseInt(postFixString);
        }
        postFix++;
        ret = prefix + postFix;
        return ret;
    }

    
	public static String getDefaultReplaceCharsCode(String name) {
		
		return prepareCodaField(name);
		
	}
    
    public static String getDefaultReplaceCharsName(String name) {
    	
    	name = prepareCodaField(name);

    	//further limit the characters 
    	return RegExUtils.removeAll(name, "[^A-Za-z0-9@\\\\/_]").trim();
    }
    
    
    public static String getCanonicalComparisonName(final String inputName) {
   
    	final String leftName = StringUtils.left(inputName, 36);
    	
    	final String preparedName = prepareCodaField(leftName);
    	final String uppercaseName = preparedName.toUpperCase(Locale.ENGLISH);
    	final String trimmedName = uppercaseName.trim(); 
    	final String spacesConvertedName = StringUtils.replace(trimmedName, " ", "_"); 

    	//further limit the characters 
    	return spacesConvertedName;
    }
    
    public static String getCodaEmployeeId(final String staffType, final String unifieldStaffId) {
    	
    	StringBuilder codaEmployeeId = new StringBuilder();

    	String cleanedId = RegExUtils.removeAll(unifieldStaffId, "[^A-Za-z0-9\\$\\_]").trim();

    	if( getCanonicalComparisonName(staffType).equals(getCanonicalComparisonName("LOCAL_STAFF"))) {
    		
    		codaEmployeeId.append("EN");
    		codaEmployeeId.append(cleanedId);
    		
    	} else {
    		
    		codaEmployeeId.append("ES");
    		codaEmployeeId.append(StringUtils.leftPad(cleanedId, 7, '0'));
    		
    	}
    	

    	return codaEmployeeId.toString();
    	
    	
    }
    
}
